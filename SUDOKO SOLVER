#include <iostream>
#include <vector>

using namespace std;

const int SIZE = 9;

bool isSafe(vector<vector<int>>& board, int row, int col, int num) {
    // Check row
    for (int x = 0; x < SIZE; x++) {
        if (board[row][x] == num) return false;
    }

    // Check column
    for (int x = 0; x < SIZE; x++) {
        if (board[x][col] == num) return false;
    }

    // Check 3x3 sub-grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int r = startRow; r < startRow + 3; r++) {
        for (int c = startCol; c < startCol + 3; c++) {
            if (board[r][c] == num) return false;
        }
    }

    return true;
}

bool findUnassignedLocation(vector<vector<int>>& board, int& row, int& col) {
    for (row = 0; row < SIZE; row++) {
        for (col = 0; col < SIZE; col++) {
            if (board[row][col] == 0) return true;
        }
    }
    return false;
}

bool solveSudoku(vector<vector<int>>& board) {
    int row, col;

    // If no unassigned location, puzzle solved
    if (!findUnassignedLocation(board, row, col))
        return true;

    // Try digits 1 to 9
    for (int num = 1; num <= 9; num++) {
        // Check if safe to assign num to board[row][col]
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;  // Assign num

            if (solveSudoku(board))
                return true;

            // Failure, undo assignment (backtrack)
            board[row][col] = 0;
        }
    }

    return false; // triggers backtracking
}

void printBoard(const vector<vector<int>>& board) {
    for (int r = 0; r < SIZE; r++) {
        for (int c = 0; c < SIZE; c++) {
            cout << board[r][c] << " ";
            if ((c + 1) % 3 == 0 && c != SIZE - 1)
                cout << "| ";
        }
        cout << endl;
        if ((r + 1) % 3 == 0 && r != SIZE - 1) {
            cout << "---------------------" << endl;
        }
    }
}

int main() {
    cout << "Enter Sudoku puzzle (0 for empty cells):\n";
    vector<vector<int>> board(SIZE, vector<int>(SIZE));

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cin >> board[i][j];
        }
    }

    cout << "\nInput Sudoku Puzzle:\n";
    printBoard(board);

    if (solveSudoku(board)) {
        cout << "\nSudoku Solved:\n";
        printBoard(board);
    } else {
        cout << "\nNo solution exists for the given Sudoku.\n";
    }

    return 0;
}
