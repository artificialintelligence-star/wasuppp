#include <iostream>
#include <vector>
#include <stack>
#include <set>
#include <algorithm>

using namespace std;

const int N = 3;

vector<vector<int>> goalBoard(N, vector<int>(N));

struct PuzzleState {
    vector<vector<int>> board;
    PuzzleState* parent;

    PuzzleState(vector<vector<int>> b, PuzzleState* p) : board(b), parent(p) {}

    bool isGoal() const {
        return board == goalBoard;
    }

    string boardToString() const {
        string s;
        for (auto& row : board) {
            for (int num : row) {
                s += to_string(num);
            }
        }
        return s;
    }

    void printBoard() const {
        for (auto& row : board) {
            for (int num : row) {
                cout << num << " ";
            }
            cout << endl;
        }
        cout << endl;
    }
};

// Find zero tile position with early break
void findZero(const vector<vector<int>>& board, int& zeroX, int& zeroY) {
    bool foundZero = false;
    for (int i = 0; i < N && !foundZero; ++i) {
        for (int j = 0; j < N; ++j) {
            if (board[i][j] == 0) {
                zeroX = i;
                zeroY = j;
                foundZero = true;
                break;
            }
        }
    }
}

vector<PuzzleState*> generateSuccessors(PuzzleState* current) {
    vector<PuzzleState*> successors;
    vector<vector<int>> board = current->board;

    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};
    int zeroX = -1, zeroY = -1;

    findZero(board, zeroX, zeroY);

    for (int k = 0; k < 4; ++k) {
        int newX = zeroX + dx[k];
        int newY = zeroY + dy[k];

        if (newX >= 0 && newX < N && newY >= 0 && newY < N) {
            vector<vector<int>> newBoard = board;
            swap(newBoard[zeroX][zeroY], newBoard[newX][newY]);
            successors.push_back(new PuzzleState(newBoard, current));
        }
    }

    return successors;
}

void printSolutionPath(PuzzleState* state) {
    vector<PuzzleState*> path;
    while (state != nullptr) {
        path.push_back(state);
        state = state->parent;
    }
    reverse(path.begin(), path.end());

    cout << "Solution steps:" << endl;
    for (auto* step : path) {
        step->printBoard();
    }
}

void cleanupStates(const set<string>& visited, vector<PuzzleState*>& allStates) {
    // Delete all dynamically allocated PuzzleStates to avoid memory leaks
    for (PuzzleState* state : allStates) {
        delete state;
    }
    allStates.clear();
}

void solveDFS(vector<vector<int>>& initialBoard) {
    stack<PuzzleState*> stk;
    set<string> visited;
    vector<PuzzleState*> allStates; // Track all allocated states for cleanup

    PuzzleState* startState = new PuzzleState(initialBoard, nullptr);
    stk.push(startState);
    allStates.push_back(startState);

    while (!stk.empty()) {
        PuzzleState* current = stk.top();
        stk.pop();

        string key = current->boardToString();
        if (visited.find(key) != visited.end()) {
            // Already visited this state, delete duplicate
            delete current;
            continue;
        }

        visited.insert(key);

        if (current->isGoal()) {
            cout << "Goal state reached!" << endl;
            printSolutionPath(current);
            cleanupStates(visited, allStates);
            return;
        }

        vector<PuzzleState*> neighbors = generateSuccessors(current);
        for (auto* neighbor : neighbors) {
            string nKey = neighbor->boardToString();
            if (visited.find(nKey) == visited.end()) {
                stk.push(neighbor);
                allStates.push_back(neighbor);
            } else {
                delete neighbor;
            }
        }
    }

    cout << "No solution found." << endl;
    cleanupStates(visited, allStates);
}

int main() {
    vector<vector<int>> initialBoard(N, vector<int>(N));

    cout << "Enter the initial board (3x3), use 0 for the blank tile:" << endl;
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            cin >> initialBoard[i][j];

    cout << "Enter the goal board (3x3), use 0 for the blank tile:" << endl;
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            cin >> goalBoard[i][j];

    solveDFS(initialBoard);

    return 0;
}
