#include <iostream>
#include <queue>
#include <vector>
#include <cmath>
#include <cstring>
using namespace std;

struct Node {
    int x, y;
    double f, g, h;
    Node(int _x, int _y, double _g, double _h) : x(_x), y(_y), g(_g), h(_h) {
        f = g + h;
    }
    bool operator>(const Node& other) const {
        return f > other.f;
    }
};

// Euclidean distance heuristic
double heuristic(int x1, int y1, int x2, int y2) {
    return sqrt((x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2));
}

bool isValid(int x, int y, int rows, int cols, vector<vector<int>>& grid) {
    return (x >= 0 && x < rows && y >= 0 && y < cols && grid[x][y] == 0);
}

void aStarSearch(vector<vector<int>>& grid, int startX, int startY, int endX, int endY) {
    int rows = grid.size(), cols = grid[0].size();
    vector<vector<bool>> visited(rows, vector<bool>(cols, false));

    priority_queue<Node, vector<Node>, greater<Node>> openSet;
    double hStart = heuristic(startX, startY, endX, endY);
    openSet.emplace(startX, startY, 0.0, hStart);

    int dx[] = {1, 0, -1, 0};
    int dy[] = {0, 1, 0, -1};

    while (!openSet.empty()) {
        Node current = openSet.top();
        openSet.pop();

        int x = current.x, y = current.y;
        if (visited[x][y]) continue;
        visited[x][y] = true;

        if (x == endX && y == endY) {
            cout << "✅ Goal reached with total cost: " << current.g << "\n";
            return;
        }

        for (int i = 0; i < 4; ++i) {
            int newX = x + dx[i], newY = y + dy[i];
            if (isValid(newX, newY, rows, cols, grid) && !visited[newX][newY]) {
                double gCost = current.g + 1.0;
                double hCost = heuristic(newX, newY, endX, endY);
                openSet.emplace(newX, newY, gCost, hCost);
            }
        }
    }

    cout << "❌ No path found.\n";
}

int main() {
    int rows, cols;
    cout << "Enter number of rows and columns in the grid: ";
    cin >> rows >> cols;

    vector<vector<int>> grid(rows, vector<int>(cols));
    cout << "Enter grid (0 = free, 1 = obstacle):\n";
    for (int i = 0; i < rows; ++i)
        for (int j = 0; j < cols; ++j)
            cin >> grid[i][j];

    int startX, startY, endX, endY;
    cout << "Enter start coordinates (row col): ";
    cin >> startX >> startY;
    cout << "Enter goal coordinates (row col): ";
    cin >> endX >> endY;

    // Validity checks
    if (!isValid(startX, startY, rows, cols, grid)) {
        cout << "Invalid start position.\n";
        return 0;
    }
    if (!isValid(endX, endY, rows, cols, grid)) {
        cout << "Invalid goal position.\n";
        return 0;
    }

    aStarSearch(grid, startX, startY, endX, endY);
    return 0;
}
