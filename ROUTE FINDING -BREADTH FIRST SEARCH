#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <algorithm>


using namespace std;

// Breadth-First Search algorithm (no heuristics)
vector<int> breadthFirstSearch(int start, int goal, unordered_map<int, vector<int>>& graph, int n) {
    vector<bool> visited(n, false);
    queue<int> q;
    unordered_map<int, int> parent; // to reconstruct path

    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int node = q.front();
        q.pop();

        if (node == goal) {
            // Reconstruct the path from goal to start
            vector<int> path;
            while (node != start) {
                path.push_back(node);
                node = parent[node];
            }
            path.push_back(start);
            reverse(path.begin(), path.end());
            return path;
        }

        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                parent[neighbor] = node;
                q.push(neighbor);
            }
        }
    }

    return {}; // Return empty if path not found
}

int main() {
    int n, m;
    cout << "Enter the number of nodes: ";
    cin >> n;

    cout << "Skipping coordinates input, since BFS doesn't need heuristics.\n";

    cout << "Enter the number of edges: ";
    cin >> m;

    unordered_map<int, vector<int>> graph;

    cout << "Enter the edges (source, destination):\n";
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // undirected graph
    }

    int start, goal;
    cout << "Enter the start node: ";
    cin >> start;
    cout << "Enter the goal node: ";
    cin >> goal;

    // Execute Breadth-First Search
    vector<int> path = breadthFirstSearch(start, goal, graph, n);

    if (!path.empty()) {
        cout << "Path found using BFS: ";
        for (int node : path) {
            cout << node << " ";
        }
        cout << "\n";
    } else {
        cout << "No path found from " << start << " to " << goal << ".\n";
    }

    return 0;
}
