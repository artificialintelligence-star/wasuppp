#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <cmath>

using namespace std;

typedef pair<double, int> pdi; // (heuristic cost, node)

struct Node {
    int x, y;
};

double euclideanDistance(Node a, Node b) {
    return sqrt(pow(b.x - a.x, 2) + pow(b.y - a.y, 2));
}

// Best-First Search algorithm
vector<int> bestFirstSearch(int start, int goal, unordered_map<int, vector<int>>& graph, vector<double>& heuristic) {
    vector<bool> visited(heuristic.size(), false);
    priority_queue<pdi, vector<pdi>, greater<pdi>> pq; // Min-Heap
    vector<int> path;

    pq.push({heuristic[start], start});

    while (!pq.empty()) {
        int node = pq.top().second;
        pq.pop();

        if (visited[node]) continue;
        visited[node] = true;
        path.push_back(node);

        if (node == goal) {
            return path;
        }

        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                pq.push({heuristic[neighbor], neighbor});
            }
        }
    }

    return {}; // Return empty if path not found
}

int main() {
    int n, m;
    cout << "Enter the number of nodes: ";
    cin >> n;

    vector<Node> nodes(n);

    cout << "Enter the coordinates (x, y) for each node:\n";
    for (int i = 0; i < n; ++i) {
        cout << "Node " << i << ": ";
        cin >> nodes[i].x >> nodes[i].y;
    }

    cout << "Enter the number of edges: ";
    cin >> m;

    unordered_map<int, vector<int>> graph;

    cout << "Enter the edges (source, destination):\n";
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // Since it's an undirected graph
    }

    int start, goal;
    cout << "Enter the start node: ";
    cin >> start;
    cout << "Enter the goal node: ";
    cin >> goal;

    // Calculate Euclidean distances as heuristic values
    vector<double> heuristic(n);
    for (int i = 0; i < n; ++i) {
        heuristic[i] = euclideanDistance(nodes[i], nodes[goal]);
    }

    // Execute Best-First Search
    vector<int> path = bestFirstSearch(start, goal, graph, heuristic);

    if (!path.empty()) {
        cout << "Path found: ";
        for (int node : path) {
            cout << node << " ";
        }
        cout << "\n";
    } else {
        cout << "No path found from " << start << " to " << goal << ".\n";
    }

    return 0;   
}


Enter the number of nodes: 5
Enter the coordinates (x, y) for each node:
Node 0: 0 0
Node 1: 1 2
Node 2: 3 1
Node 3: 2 4
Node 4: 4 0
Enter the number of edges: 6
Enter the edges (source, destination):
0 1
0 2
1 3
1 4
2 4
3 4
Enter the start node: 0
Enter the goal node: 4
Path found: 0 2 4
