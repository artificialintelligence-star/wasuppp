#include <iostream>
#include <vector>
using namespace std;

// Function to check if the color assignment is valid
bool isSafe(int node, vector<vector<int>>& graph, vector<int>& color, int col) {
    for (int adjacent = 0; adjacent < graph.size(); ++adjacent) {
        if (graph[node][adjacent] == 1 && color[adjacent] == col) {
            return false;  // Conflict found with an adjacent vertex
        }
    }
    return true;
}

// Recursive utility function to solve graph coloring problem
bool graphColoringUtil(vector<vector<int>>& graph, int m, vector<int>& color, int node) {
    if (node == graph.size()) {
        return true;  // All vertices are successfully colored
    }
    for (int col = 1; col <= m; ++col) {
        if (isSafe(node, graph, color, col)) {
            color[node] = col;
            if (graphColoringUtil(graph, m, color, node + 1)) {
                return true;
            }
            color[node] = 0;  // Backtrack if coloring fails
        }
    }
    return false;
}

// Main function to initiate graph coloring
void graphColoring(vector<vector<int>>& graph, int m) {
    int n = graph.size();
    vector<int> color(n, 0);

    if (graphColoringUtil(graph, m, color, 0)) {
        cout << "Solution Exists: Following are the assigned colors:" << endl;
        for (int i = 0; i < n; ++i) {
            cout << "Vertex " << i << " --> Color " << color[i] << endl;
        }
    } else {
        cout << "No solution exists for the given number of colors." << endl;
    }
}

int main() {
    int n, e, m;
    cout << "Enter the number of vertices: ";
    cin >> n;

    cout << "Enter the number of edges: ";
    cin >> e;

    vector<vector<int>> graph(n, vector<int>(n, 0));

    cout << "Enter the edges (u v) where u and v are vertices (0-based indexing):" << endl;
    for (int i = 0; i < e; ++i) {
        int u, v;
        cin >> u >> v;
        if (u >= n || v >= n) {
            cout << "Invalid edge! Vertex index out of range." << endl;
            return 1;
        }
        graph[u][v] = 1;
        graph[v][u] = 1;
    }

    cout << "Enter the number of colors: ";
    cin >> m;

    graphColoring(graph, m);

    return 0;
}



Enter the number of vertices: 4
Enter the number of edges: 5
Enter the edges (u v) where u and v are vertices (0-based indexing):
0 1
0 2
1 2
1 3
2 3
Enter the number of colors: 3
